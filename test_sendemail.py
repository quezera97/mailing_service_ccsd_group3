# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestSendemail():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_sendemail(self):
    # Test name: send-email
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("http://localhost:8081/")
    # 2 | setWindowSize | 975x816 | 
    self.driver.set_window_size(975, 816)
    # 3 | click | id=email | 
    self.driver.find_element(By.ID, "email").click()
    # 4 | type | id=email | aiman.ab.ghapar@gmail.com
    self.driver.find_element(By.ID, "email").send_keys("aiman.ab.ghapar@gmail.com")
    # 5 | click | id=message | 
    self.driver.find_element(By.ID, "message").click()
    # 6 | type | id=message | test send email with selenium
    self.driver.find_element(By.ID, "message").send_keys("test send email with selenium")
    # 7 | click | css=button | 
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
  
# import pytest
# from selenium import webdriver
# from selenium.webdriver.chrome.service import Service
# from selenium.webdriver.chrome.options import Options
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC

# class TestSendemail():
#     def setup_method(self, method):
#         # Path to ChromeDriver
#         chrome_driver_path = '/usr/local/bin/chromedriver'  # Update this path as necessary

#         # Set up Chrome options
#         chrome_options = Options()
#         chrome_options.add_argument("--headless")  # Run Chrome in headless mode
#         chrome_options.add_argument("--no-sandbox")
#         chrome_options.add_argument("--disable-dev-shm-usage")

#         # Set up ChromeDriver service
#         service = Service(chrome_driver_path)
#         self.driver = webdriver.Chrome(service=service, options=chrome_options)
#         self.vars = {}
    
#     def teardown_method(self, method):
#         self.driver.quit()
    
#     def test_sendemail(self):
#         self.driver.get("http://localhost:8081/")
#         self.driver.set_window_size(975, 816)
        
#         wait = WebDriverWait(self.driver, 10)  # Wait up to 10 seconds
        
#         # Wait for email field to be clickable, then interact with it
#         email_field = wait.until(EC.element_to_be_clickable((By.ID, "email")))
#         email_field.click()
#         email_field.send_keys("aiman.ab.ghapar@gmail.com")
        
#         # Wait for message field to be clickable, then interact with it
#         message_field = wait.until(EC.element_to_be_clickable((By.ID, "message")))
#         message_field.click()
#         message_field.send_keys("test send email with selenium")
        
#         # Wait for send button to be clickable, then interact with it
#         send_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button")))
#         send_button.click()
        
#         # Optional: Add assertions to verify expected results
#         # Example: Wait for a success message to be visible and verify it
#         # success_message = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".success-message")))
#         # assert "Email sent successfully" in success_message.text
